group Python;

file( functions, scripts ) ::=<<
<[functions, scripts]; separator="\n\n">
>>

function( name, inArgs, outArgs, body ) ::=<<
def <name>(<inArgs>):
  <body>
  return (<outArgs>)
>>

body( stat ) ::=<<
<stat; separator="\n">
>>

assign( var, expr ) ::=<<
<var> = <expr>;
>>

inArgs( args ) ::=<<
<args; separator=", ">
>>

outArgs( args ) ::=<<
<args; separator=", ">
>>

matrix( el ) ::=<<
<el>
>>

uminus( x )::=<<
-<x>
>>

add( a, b) ::=<<
(<a> + <b>)
>>

sub( a, b) ::=<<
(<a> - <b>)
>>

elmul( a, b) ::=<<
(<a> * <b>)
>>

eldiv( a, b) ::=<<
(<a>/<b>)
>>

matmul( a, b) ::=<<
dot(<a>,<b>)
>>

matdiv( a, b) ::=<<
(<a>/<b>)
>>

elpow( a, b) ::=<<
power(<a>, <b>)
>>

matpow( a, b) ::=<<
(mat(<a>)^mat(<b>))
>>

trans( x ) ::=<<
<x>.T
>>

ctrans( x ) ::=<<
<x>.conj().T
>>

call( name, args ) ::=<<
<name><args>
>>

callArgs( args ) ::=<<
(<args; separator=", ">)
>>

svd( args ) ::=<<
linalg.svd<args>
>>

eig( args ) ::=<<
linalg.eig<args>
>>

rand( args ) ::=<<
random.rand<args>
>>

randn( args ) ::=<<
random.randn<args>
>>

horzcat( el ) ::=<<
hstack([<el; separator=", ">])
>>

vertcat( el ) ::=<<
vstack([<el; separator=", ">])
>>

solve( A, b ) ::=<<
linalg.lstsq( <A>, <b>)[0]
>>

size( a ) ::=<<
shape( <a> )
>>
